{
  "name": "Java Version Manager",
  "tagline": "Never manually change your JAVA_HOME again ",
  "body": "# jvm [![License](https://img.shields.io/github/license/caarlos0/jvm.svg?style=flat-square)](/LICENSE.md) [![Build Status](https://img.shields.io/travis/caarlos0/jvm/master.svg?style=flat-square)](https://circleci.com/gh/caarlos0/jvm)\r\n\r\n> The _\"Java Version Manager\"_\r\n\r\nAutomatically change `JAVA_HOME` and `PATH` based on current directory\r\n`.java-version`, `pom.xml` and `build.gradle` files.\r\n\r\nThe philosophy behind this project is to simplify and automate the `JAVA_HOME`\r\nchanging, much like `rbenv` and `rvm` do for Ruby.\r\n\r\nIt's pretty common to have to work in Java 6, 7 and 8 projects, and changing\r\n`PATH`s and `JAVA_HOME`s by hand is a very repetitive task.\r\n\r\n### Usage\r\n\r\n```console\r\n$ git clone https://github.com/caarlos0/jvm.git ~/.jvm\r\n$ echo \".java-version\" >> ~/.gitignore\r\n\r\n# for bash\r\n$ echo \"source ~/.jvm/jvm.sh\" >> ~/.bashrc\r\n\r\n# for zsh\r\n$ echo \"source ~/.jvm/jvm.sh\" >> ~/.zshrc\r\n```\r\n\r\nThen, just `cd` to a java project folder. `jvm` will look for a `.java-version`\r\nand use whatever version is inside it. If the file don't exist, but a\r\n`pom.xml` do, `jvm` will try to extract the version from the `pom.xml` file\r\nusing a regular expression. If no `pom.xml` is found, it will look for the\r\n`build.gradle` file and do the same strategy to extract the java version.\r\n\r\n`jvm` can also recursively search for `.java-version`, `pom.xml` and\r\n`build.gradle` files, so, `cd`-ing to project's subfolder should maintain\r\nits version set.\r\n\r\nYou can always change the current folder java version by doing:\r\n\r\n```console\r\n$ jvm local 7\r\n```\r\n\r\nOn OSX, `jvm` will use the `java_home` tool to find the available versions. For\r\nUbuntu, right now `jvm` has `/usr/lib/jvm/java-${version}-oracle/` hard coded.\r\nThis might change soon. If you need custom versions, like `6-openjdk`, for\r\nexample, you can run `jvm config` and add a line like this:\r\n\r\n```properties\r\n6-openjdk=/path/to/openjdk/6\r\n```\r\n\r\nor even:\r\n\r\n```properties\r\n6=/path/to/openjdk/6\r\n```\r\n\r\n\r\nAnd `jvm` will automagically works.\r\n\r\nAnd, yes, this strategy (based on `jvm config`) can make `jvm` work on Windows\r\nwith any `bash` terminal too. Or any other operating system with a POSIX shell\r\nreally.\r\n\r\nYou can also read the [self-document tests][tests] to find out more usages.\r\n\r\n[tests]: /tests/test.clitest.md\r\n\r\n### Antigen/Antibody\r\n\r\nFor those using Antigen, Antibody or whatever, just bundle `caarlos0/jvm`, as\r\nin:\r\n\r\n```console\r\n$ antibody bundle caarlos0/jvm\r\n```\r\n\r\nAnd it should all work out of the box.\r\n\r\n# Honorable mentions\r\n\r\n- [@aureliojargas](https://github.com/aureliojargas) for helping review `jvm.sh`\r\nand for rewrite my test suite with\r\n[clitest](https://github.com/aureliojargas/clitest);\r\n- [@velo](https://github.com/velo) for helping me test (on Windows), reporting\r\nbugs and giving some useful suggestions.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}